AudioWorkletProcessor.prototype._t3=function(){this._u3=true;this.port.onmessage=(_v3)=>{if(_v3.data==="kill")this._u3=false;};};class _w3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._t3();}process(_x3,_y3,parameters){const input=_x3[0];const bypass=parameters.bypass;for(let c=0;c<input.length;++c){const _z3=input[c];for(let _A3=0;_A3<_z3.length;++_A3){const _B3=(bypass[_A3]!==undefined)?bypass[_A3]:bypass[0];
_y3[_B3][c][_A3]=_z3[_A3];}}return this._u3;}}class _C3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"gain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(){super();this._t3();}process(_x3,_y3,parameters){const _D3=_x3[0];const _E3=_x3[1];const output=_y3[0];const gain=parameters.gain;for(let c=0;c<_E3.length;++c){const _z3=_E3[c];const _F3=output[c];for(let _A3=0;_A3<_z3.length;++_A3)_F3[_A3]=_z3[_A3];}for(let c=0;c<_D3.length;++c){const _z3=_D3[c];const _F3=output[c];
for(let _A3=0;_A3<_z3.length;++_A3){const _G3=(gain[_A3]!==undefined)?gain[_A3]:gain[0];_F3[_A3]+=_z3[_A3]*_G3;}}return this._u3;}}registerProcessor("audio-bus-input",_w3);registerProcessor("audio-bus-output",_C3);class _H3 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:1.0,minValue:0.0},{name:"factor",automationRate:"a-rate",defaultValue:20,minValue:1,maxValue:100}
,{name:"resolution",automationRate:"a-rate",defaultValue:8,minValue:2,maxValue:16},{name:"mix",automationRate:"a-rate",defaultValue:0.8,minValue:0.0,maxValue:1.0}];}static _I3=[undefined,undefined,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768];constructor(_J3){super();this._t3();const _K3=_J3.outputChannelCount[0];this._L3=new Float32Array(_K3);this._M3=new Uint32Array(_K3);}process(_x3,_y3,parameters){const input=_x3[0];const output=_y3[0];const bypass=parameters.bypass;const gain=parameters.gain;
const factor=parameters.factor;const resolution=parameters.resolution;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _z3=input[c];const _F3=output[c];for(let _A3=0;_A3<_z3.length;++_A3){_F3[_A3]=_z3[_A3];if(this._M3[c]===0)this._L3[c]=_z3[_A3];const _N3=(factor[_A3]!==undefined)?factor[_A3]:factor[0];++this._M3[c];this._M3[c]%=_N3;const _B3=(bypass[_A3]!==undefined)?bypass[_A3]:bypass[0];if(_B3>0.0){continue;}let _O3=this._L3[c];const _G3=(gain[_A3]!==undefined)?gain[_A3]:gain[0];_O3*=_G3;_O3=Math.max(Math.min(_O3,
1.0),-1.0);const _P3=(resolution[_A3]!==undefined)?resolution[_A3]:resolution[0];const max=(_O3>0.0)?_H3._I3[_P3]-1:_H3._I3[_P3];_O3=Math.round(_O3*max)/max;const _Q3=(mix[_A3]!==undefined)?mix[_A3]:mix[0];_F3[_A3]*=(1.0-_Q3);_F3[_A3]+=(_O3*_Q3);}}return this._u3;}}registerProcessor("bitcrusher-processor",_H3);class _R3{constructor(_S3=1e-3){this.setTime(_S3);}setTime(_S3){this._T3=Math.exp(-1/(_S3*sampleRate));}process(_U3,_V3){return _U3+this._T3*(_V3-_U3);}}class _W3{constructor(_X3,_Y3){this._Z3=new _R3(_X3);
this.__3=new _R3(_Y3);this._04=_X3;this._14=_Y3;}_24(_S3){if(_S3===this._04)return;this._Z3.setTime(_S3);this._04=_S3;}_34(_S3){if(_S3===this._14)return;this.__3.setTime(_S3);this._14=_S3;}process(_U3,_V3){if(_U3>_V3)return this._Z3.process(_U3,_V3);else return this.__3.process(_U3,_V3);}}class _44 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"ingain",automationRate:"a-rate",defaultValue:1,minValue:0}
,{name:"threshold",automationRate:"a-rate",defaultValue:0.125,minValue:1e-3,maxValue:1},{name:"ratio",automationRate:"a-rate",defaultValue:4,minValue:1},{name:"attack",automationRate:"a-rate",defaultValue:0.05,minValue:1e-3,maxValue:1e-1},{name:"release",automationRate:"a-rate",defaultValue:0.25,minValue:1e-2,maxValue:1},{name:"outgain",automationRate:"a-rate",defaultValue:1,minValue:0}];}constructor(_54){super();this._t3();const _Z3=_44.parameterDescriptors.find(_64=>_64.name==="attack");const __3=_44.parameterDescriptors.find(_64=>_64.name==="release");
this._74=new _W3(_Z3.defaultValue,__3.defaultValue);this._84=0;}process(_94,_a4,_b4){const input=_94[0];const output=_a4[0];const bypass=_b4.bypass;const ingain=_b4.ingain;const outgain=_b4.outgain;const threshold=_b4.threshold;const ratio=_b4.ratio;const attack=_b4.attack;const release=_b4.release;if(input.length===0)return this._u3;for(let _A3=0;_A3<input[0].length;++_A3){let frame=input.map(_c4=>_c4[_A3]);output.forEach((_c4,_d4)=>{_c4[_A3]=frame[_d4];});const _e4=(ingain[_A3]!==undefined)?ingain[_A3]:ingain[0];
frame=frame.map(_f4=>_f4*=_e4);const rect=frame.map(_f4=>Math.abs(_f4));const max=Math.max(...rect);const _g4=_h4(max);const _i4=(threshold[_A3]!==undefined)?threshold[_A3]:threshold[0];const _j4=_h4(_i4);const _k4=Math.max(0,_g4-_j4);const _Z3=(attack[_A3]!==undefined)?attack[_A3]:attack[0];const __3=(release[_A3]!==undefined)?release[_A3]:release[0];this._74._24(_Z3);this._74._34(__3);this._84=this._74.process(_k4,this._84);const _B3=(bypass[_A3]!==undefined)?bypass[_A3]:bypass[0];if(_B3>0)continue;const _P3=(ratio[_A3]!==undefined)?ratio[_A3]:ratio[0];
const _l4=(this._84/_P3)-this._84;const _G3=_m4(_l4);frame=frame.map(_f4=>_f4*=_G3);const _n4=(outgain[_A3]!==undefined)?outgain[_A3]:outgain[0];frame=frame.map(_f4=>_f4*=_n4);output.forEach((_c4,_d4)=>{_c4[_A3]=frame[_d4];});}return this._u3;}}function _h4(_o4){return 20*Math.log10(_o4);}function _m4(_o4){return Math.pow(10,_o4/20);}registerProcessor("compressor-processor",_44);class _p4 extends AudioWorkletProcessor{static _q4=5.0;static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1},{name:"time",automationRate:"a-rate",defaultValue:0.2,minValue:0.0,maxValue:_p4._q4},{name:"feedback",automationRate:"a-rate",defaultValue:0.5,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_J3){super();this._t3();const _K3=_J3.outputChannelCount[0];const _r4=(_p4._q4*sampleRate)+1;this.buffer=new Array(_K3);this._s4=new Uint32Array(_K3);for(let c=0;c<_K3;++c)this.buffer[c]=new Float32Array(_r4);
}process(_x3,_y3,parameters){const input=_x3[0];const output=_y3[0];const bypass=parameters.bypass;const time=parameters.time;const feedback=parameters.feedback;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _z3=input[c];const _F3=output[c];for(let _A3=0;_A3<_z3.length;++_A3){_F3[_A3]=_z3[_A3];const _i4=(time[_A3]!==undefined)?time[_A3]:time[0];const _t4=this._u4(c,_i4);const _N3=(feedback[_A3]!==undefined)?feedback[_A3]:feedback[0];const _v4=_z3[_A3]+(_t4*_N3);this.write(c,_v4);const _B3=(bypass[_A3]!==undefined)?bypass[_A3]:bypass[0];
if(_B3>0.0){continue;}const _Q3=(mix[_A3]!==undefined)?mix[_A3]:mix[0];_F3[_A3]*=(1-_Q3);_F3[_A3]+=(_t4*_Q3);}}return this._u3;}_u4(_w4,_S3){const _x4=_S3*sampleRate;let _y4=(this._s4[_w4]-~~_x4);let _z4=(_y4-1);while(_y4<0)_y4+=this.buffer[_w4].length;while(_z4<0)_z4+=this.buffer[_w4].length;const frac=_x4-~~_x4;const _A4=this.buffer[_w4][_y4];const _B4=this.buffer[_w4][_z4];return _A4+(_B4-_A4)*frac;}write(_w4,_C4){++this._s4[_w4];this._s4[_w4]%=this.buffer[_w4].length;this.buffer[_w4][this._s4[_w4]]=_C4;
}}registerProcessor("delay-processor",_p4);class _D4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [];}constructor(){super();this._t3();}process(_E4,_F4,_G4){const input=_E4[0];const _H4=_F4[0];const _I4=_F4[1];for(let c=0;c<input.length;++c){const _z3=input[c];const _J4=_H4[c];const _K4=_I4[c];for(let _A3=0;_A3<_z3.length;++_A3){_J4[_A3]=_z3[_A3];_K4[_A3]=_z3[_A3];}}return this._u3;}}class _L4 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",
defaultValue:0,minValue:0,maxValue:1}];}constructor(){super();this._t3();}process(_E4,_F4,_G4){const _D3=_E4[0];const _E3=_E4[1];const output=_F4[0];const bypass=_G4.bypass;for(let c=0;c<_E3.length;++c){const _M4=_D3[c];const _N4=_E3[c];const _F3=output[c];for(let _A3=0;_A3<_M4.length;++_A3){const _B3=(bypass[_A3]!==undefined)?bypass[_A3]:bypass[0];if(_B3>0){_F3[_A3]=_N4[_A3];}else {_F3[_A3]=_M4[_A3];}}}return this._u3;}}registerProcessor("eq-input",_D4);registerProcessor("eq-output",_L4);class _O4 extends AudioWorkletProcessor{
static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"gain",automationRate:"a-rate",defaultValue:0.5,minValue:0.0}];}constructor(){super();this._t3();}process(_x3,_y3,parameters){const input=_x3[0];const output=_y3[0];const bypass=parameters.bypass;const gain=parameters.gain;for(let c=0;c<input.length;++c){const _z3=input[c];const _F3=output[c];for(let _A3=0;_A3<_z3.length;++_A3){_F3[_A3]=_z3[_A3];const _B3=(bypass[_A3]!==undefined)?bypass[_A3]:bypass[0];
if(_B3>0.0){continue;}const _G3=(gain[_A3]!==undefined)?gain[_A3]:gain[0];_F3[_A3]*=_G3;}}return this._u3;}}registerProcessor("gain-processor",_O4);class _P4 extends AudioWorkletProcessor{static get parameterDescriptors(){const _Q4=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(5000.0,_Q4),minValue:10.0,maxValue:_Q4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0}
,{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_J3){super();this._t3();const _K3=_J3.outputChannelCount[0];this._R4=0;this._S4=0;this._T4=0;this._U4=0;this._V4=0;this._W4=new Float32Array(_K3);this._X4=new Float32Array(_K3);this._Y4=new Float32Array(_K3);this._Z4=new Float32Array(_K3);this.__4=-1;this._05=-1;this._15=-1;}process(_x3,_y3,parameters){const input=_x3[0];const output=_y3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;
const _25=(freq.length===1&&q.length===1&&gain.length===1);if(_25)this._35(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _z3=input[c];const _F3=output[c];for(let _A3=0;_A3<_z3.length;++_A3){if(_25===false){const _N3=(freq[_A3]!==undefined)?freq[_A3]:freq[0];const _45=(q[_A3]!==undefined)?q[_A3]:q[0];const _G3=(gain[_A3]!==undefined)?gain[_A3]:gain[0];this._35(_N3,_45,_G3);}const _55=this._T4*_z3[_A3]+this._U4*this._W4[c]+this._V4*this._X4[c]-this._R4*this._Y4[c]-this._S4*this._Z4[c];this._X4[c]=this._W4[c];
this._W4[c]=_z3[_A3];this._Z4[c]=this._Y4[c];this._Y4[c]=_55;const _B3=(bypass[_A3]!==undefined)?bypass[_A3]:bypass[0];_F3[_A3]=(_B3>0)?_z3[_A3]:_55;}}return this._u3;}_35(_65,_75,_85){if(_65===this.__4&&_75===this._05&&_85===this._15)return;const _95=2*Math.PI*_65/sampleRate;const _a5=Math.cos(_95);const _b5=Math.sqrt(_85);const _c5=_b5+1;const _d5=_b5-1;const _e5=_c5*_a5;const _f5=_d5*_a5;const _g5=_c5-_f5;const _h5=_c5+_f5;const alpha=Math.sin(_95)/(2*_75);const _i5=(2*Math.sqrt(_b5)*alpha);const _j5=_g5+_i5;
const _R4=2*(_d5-_e5);const _S4=_g5-_i5;const _T4=_b5*(_h5+_i5);const _U4=-2*_b5*(_d5+_e5);const _V4=_b5*(_h5-_i5);this._R4=_R4/_j5;this._S4=_S4/_j5;this._T4=_T4/_j5;this._U4=_U4/_j5;this._V4=_V4/_j5;this.__4=_65;this._05=_75;this._15=_85;}}registerProcessor("hi-shelf-processor",_P4);class _k5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _l5=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(1500.0,
_l5),minValue:10.0,maxValue:_l5},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}];}constructor(_J3){super();this._t3();const _K3=_J3.outputChannelCount[0];this._R4=0;this._S4=0;this._T4=0;this._U4=0;this._V4=0;this._W4=new Float32Array(_K3);this._X4=new Float32Array(_K3);this._Y4=new Float32Array(_K3);this._Z4=new Float32Array(_K3);this._m5=-1;this._05=-1;}process(_x3,_y3,parameters){const input=_x3[0];const output=_y3[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;
const q=parameters.q;const _25=(cutoff.length===1&&q.length===1);if(_25)this._35(cutoff[0],q[0]);for(let c=0;c<input.length;++c){const _z3=input[c];const _F3=output[c];for(let _A3=0;_A3<_z3.length;++_A3){if(_25===false){const c=(cutoff[_A3]!==undefined)?cutoff[_A3]:cutoff[0];const _45=(q[_A3]!==undefined)?q[_A3]:q[0];this._35(c,_45);}const _55=this._T4*_z3[_A3]+this._U4*this._W4[c]+this._V4*this._X4[c]-this._R4*this._Y4[c]-this._S4*this._Z4[c];this._X4[c]=this._W4[c];this._W4[c]=_z3[_A3];this._Z4[c]=this._Y4[c];
this._Y4[c]=_55;const _B3=(bypass[_A3]!==undefined)?bypass[_A3]:bypass[0];_F3[_A3]=(_B3>0)?_z3[_A3]:_55;}}return this._u3;}_35(_n5,_75){if(_n5===this._m5&&_75===this._05)return;const _95=2*Math.PI*_n5/sampleRate;const alpha=Math.sin(_95)/(2*_75);const _a5=Math.cos(_95);const _j5=1+alpha;const _R4=-2*_a5;const _S4=1-alpha;const _T4=(1+_a5)/2;const _U4=-1-_a5;const _V4=(1+_a5)/2;this._R4=_R4/_j5;this._S4=_S4/_j5;this._T4=_T4/_j5;this._U4=_U4/_j5;this._V4=_V4/_j5;this._m5=_n5;this._05=_75;}}registerProcessor("hpf2-processor",
_k5);class _o5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _Q4=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(500.0,_Q4),minValue:10.0,maxValue:_Q4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_J3){super();this._t3();const _K3=_J3.outputChannelCount[0];
this._R4=0;this._S4=0;this._T4=0;this._U4=0;this._V4=0;this._W4=new Float32Array(_K3);this._X4=new Float32Array(_K3);this._Y4=new Float32Array(_K3);this._Z4=new Float32Array(_K3);this.__4=-1;this._05=-1;this._15=-1;}process(_x3,_y3,parameters){const input=_x3[0];const output=_y3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _25=(freq.length===1&&q.length===1&&gain.length===1);if(_25)this._35(freq[0],q[0],gain[0]);for(let c=0;c<input.length;
++c){const _z3=input[c];const _F3=output[c];for(let _A3=0;_A3<_z3.length;++_A3){if(_25===false){const _N3=(freq[_A3]!==undefined)?freq[_A3]:freq[0];const _45=(q[_A3]!==undefined)?q[_A3]:q[0];const _G3=(gain[_A3]!==undefined)?gain[_A3]:gain[0];this._35(_N3,_45,_G3);}const _55=this._T4*_z3[_A3]+this._U4*this._W4[c]+this._V4*this._X4[c]-this._R4*this._Y4[c]-this._S4*this._Z4[c];this._X4[c]=this._W4[c];this._W4[c]=_z3[_A3];this._Z4[c]=this._Y4[c];this._Y4[c]=_55;const _B3=(bypass[_A3]!==undefined)?bypass[_A3]:bypass[0];
_F3[_A3]=(_B3>0)?_z3[_A3]:_55;}}return this._u3;}_35(_65,_75,_85){if(_65===this.__4&&_75===this._05&&_85===this._15)return;const _95=2*Math.PI*_65/sampleRate;const _a5=Math.cos(_95);const _b5=Math.sqrt(_85);const _c5=_b5+1;const _d5=_b5-1;const _e5=_c5*_a5;const _f5=_d5*_a5;const _g5=_c5-_f5;const _h5=_c5+_f5;const alpha=Math.sin(_95)/(2*_75);const _i5=(2*Math.sqrt(_b5)*alpha);const _j5=_h5+_i5;const _R4=-2*(_d5+_e5);const _S4=_h5-_i5;const _T4=_b5*(_g5+_i5);const _U4=2*_b5*(_d5-_e5);const _V4=_b5*(_g5-_i5);this._R4=_R4/_j5;
this._S4=_S4/_j5;this._T4=_T4/_j5;this._U4=_U4/_j5;this._V4=_V4/_j5;this.__4=_65;this._05=_75;this._15=_85;}}registerProcessor("lo-shelf-processor",_o5);class _p5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _l5=sampleRate*0.45;return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"cutoff",automationRate:"a-rate",defaultValue:Math.min(500.0,_l5),minValue:10.0,maxValue:_l5},{name:"q",automationRate:"a-rate",defaultValue:1.5,minValue:1.0,maxValue:100.0}
];}constructor(_J3){super();this._t3();const _K3=_J3.outputChannelCount[0];this._R4=0;this._S4=0;this._T4=0;this._U4=0;this._V4=0;this._W4=new Float32Array(_K3);this._X4=new Float32Array(_K3);this._Y4=new Float32Array(_K3);this._Z4=new Float32Array(_K3);this._m5=-1;this._05=-1;}process(_x3,_y3,parameters){const input=_x3[0];const output=_y3[0];const bypass=parameters.bypass;const cutoff=parameters.cutoff;const q=parameters.q;const _25=(cutoff.length===1&&q.length===1);if(_25)this._35(cutoff[0],q[0]);for(let c=0;
c<input.length;++c){const _z3=input[c];const _F3=output[c];for(let _A3=0;_A3<_z3.length;++_A3){if(_25===false){const c=(cutoff[_A3]!==undefined)?cutoff[_A3]:cutoff[0];const _45=(q[_A3]!==undefined)?q[_A3]:q[0];this._35(c,_45);}const _55=this._T4*_z3[_A3]+this._U4*this._W4[c]+this._V4*this._X4[c]-this._R4*this._Y4[c]-this._S4*this._Z4[c];this._X4[c]=this._W4[c];this._W4[c]=_z3[_A3];this._Z4[c]=this._Y4[c];this._Y4[c]=_55;const _B3=(bypass[_A3]!==undefined)?bypass[_A3]:bypass[0];_F3[_A3]=(_B3>0)?_z3[_A3]:_55;
}}return this._u3;}_35(_n5,_75){if(_n5===this._m5&&_75===this._05)return;const _95=2*Math.PI*_n5/sampleRate;const alpha=Math.sin(_95)/(2*_75);const _a5=Math.cos(_95);const _j5=1+alpha;const _R4=-2*_a5;const _S4=1-alpha;const _T4=(1-_a5)/2;const _U4=1-_a5;const _V4=(1-_a5)/2;this._R4=_R4/_j5;this._S4=_S4/_j5;this._T4=_T4/_j5;this._U4=_U4/_j5;this._V4=_V4/_j5;this._m5=_n5;this._05=_75;}}registerProcessor("lpf2-processor",_p5);class _q5 extends AudioWorkletProcessor{static get parameterDescriptors(){const _Q4=sampleRate*0.45;
return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"freq",automationRate:"a-rate",defaultValue:Math.min(1500.0,_Q4),minValue:10.0,maxValue:_Q4},{name:"q",automationRate:"a-rate",defaultValue:1.0,minValue:1.0,maxValue:100.0},{name:"gain",automationRate:"a-rate",defaultValue:1e-2,minValue:1e-6}];}constructor(_J3){super();this._t3();const _K3=_J3.outputChannelCount[0];this._R4=0;this._S4=0;this._T4=0;this._U4=0;this._V4=0;this._W4=new Float32Array(_K3);this._X4=new Float32Array(_K3);
this._Y4=new Float32Array(_K3);this._Z4=new Float32Array(_K3);this.__4=-1;this._05=-1;this._15=-1;}process(_x3,_y3,parameters){const input=_x3[0];const output=_y3[0];const bypass=parameters.bypass;const freq=parameters.freq;const q=parameters.q;const gain=parameters.gain;const _25=(freq.length===1&&q.length===1&&gain.length===1);if(_25)this._35(freq[0],q[0],gain[0]);for(let c=0;c<input.length;++c){const _z3=input[c];const _F3=output[c];for(let _A3=0;_A3<_z3.length;++_A3){if(_25===false){const _N3=(freq[_A3]!==undefined)?freq[_A3]:freq[0];
const _45=(q[_A3]!==undefined)?q[_A3]:q[0];const _G3=(gain[_A3]!==undefined)?gain[_A3]:gain[0];this._35(_N3,_45,_G3);}const _55=this._T4*_z3[_A3]+this._U4*this._W4[c]+this._V4*this._X4[c]-this._R4*this._Y4[c]-this._S4*this._Z4[c];this._X4[c]=this._W4[c];this._W4[c]=_z3[_A3];this._Z4[c]=this._Y4[c];this._Y4[c]=_55;const _B3=(bypass[_A3]!==undefined)?bypass[_A3]:bypass[0];_F3[_A3]=(_B3>0)?_z3[_A3]:_55;}}return this._u3;}_35(_65,_75,_85){if(_65===this.__4&&_75===this._05&&_85===this._15)return;const _95=2*Math.PI*_65/sampleRate;
const _a5=Math.cos(_95);const _b5=Math.sqrt(_85);const alpha=Math.sin(_95)/(2*_75);const _r5=alpha/_b5;const _s5=alpha*_b5;const _j5=1+_r5;const _R4=-2*_a5;const _S4=1-_r5;const _T4=1+_s5;const _U4=_R4;const _V4=1-_s5;this._R4=_R4/_j5;this._S4=_S4/_j5;this._T4=_T4/_j5;this._U4=_U4/_j5;this._V4=_V4/_j5;this.__4=_65;this._05=_75;this._15=_85;}}registerProcessor("peak-eq-processor",_q5);class _t5{constructor(_u5){this._v5=0;this._w5=0;this.feedback=0;this._x5=0;this.buffer=new Float32Array(_u5);this._y5=0;}process(_C4){
const out=this.buffer[this._y5];this._x5=(this._x5*this._v5)+(out*this._w5);this.buffer[this._y5]=_C4+(this._x5*this.feedback);++this._y5;this._y5%=this.buffer.length;return out;}_z5(_A5){this.feedback=Math.min(Math.max(0,_A5),1);}_B5(_C5){this._v5=Math.min(Math.max(0,_C5),1);this._w5=1-this._v5;}}class _D5{constructor(_u5){this.feedback=0;this.buffer=new Float32Array(_u5);this._y5=0;}process(_C4){const out=this.buffer[this._y5];this.buffer[this._y5]=_C4+(out*this.feedback);++this._y5;this._y5%=this.buffer.length;
return(out-_C4);}_z5(_A5){this.feedback=Math.min(Math.max(0,_A5),1);}}class _E5 extends AudioWorkletProcessor{static _F5=8;static _G5=4;static _H5=0.015;static _I5=0.4;static _J5=0.28;static _K5=0.7;static _L5=[1116,1188,1277,1356,1422,1491,1557,1617];static _M5=[1139,1211,1300,1379,1445,1514,1580,1640];static _N5=[556,441,341,225];static _O5=[579,464,364,248];static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"size",automationRate:"a-rate",
defaultValue:0.7,minValue:0.0,maxValue:1.0},{name:"damp",automationRate:"a-rate",defaultValue:0.1,minValue:0.0,maxValue:1.0},{name:"mix",automationRate:"a-rate",defaultValue:0.35,minValue:0.0,maxValue:1.0}];}constructor(_J3){super();this._t3();const _K3=_J3.outputChannelCount[0];this._P5=-1;this._Q5=-1;this._R5=new Array(_K3);this._S5=new Array(_K3);const _T5=[_E5._L5,_E5._M5];const _U5=[_E5._N5,_E5._O5];for(let c=0;c<_K3;++c){this._R5[c]=new Array(_E5._F5);this._S5[c]=new Array(_E5._G5);for(let i=0;i<_E5._F5;
++i)this._R5[c][i]=new _t5(_T5[c%_T5.length][i]);for(let i=0;i<_E5._G5;++i)this._S5[c][i]=new _D5(_U5[c%_U5.length][i]);}this._V5(0.5);this._B5(0.5);for(let c=0;c<_K3;++c)for(let i=0;i<_E5._G5;++i)this._S5[c][i]._z5(0.5);}process(_x3,_y3,parameters){const input=_x3[0];const output=_y3[0];const bypass=parameters.bypass;const size=parameters.size;const damp=parameters.damp;const mix=parameters.mix;for(let c=0;c<input.length;++c){const _z3=input[c];const _F3=output[c];for(let _W5=0;_W5<_z3.length;++_W5){const _A3=(size[_W5]!==undefined)?size[_W5]:size[0];
const _X5=(damp[_W5]!==undefined)?damp[_W5]:damp[0];this._V5(_A3);this._B5(_X5);_F3[_W5]=_z3[_W5];let out=0;const _O3=_z3[_W5]*_E5._H5;for(let i=0;i<_E5._F5;++i)out+=this._R5[c][i].process(_O3);for(let i=0;i<_E5._G5;++i)out=this._S5[c][i].process(out);const _B3=(bypass[_W5]!==undefined)?bypass[_W5]:bypass[0];if(_B3>0.0){continue;}const _Q3=(mix[_W5]!==undefined)?mix[_W5]:mix[0];_F3[_W5]*=(1-_Q3);_F3[_W5]+=(out*_Q3);}}return this._u3;}_V5(_u5){if(_u5===this._P5)return;const size=(_u5*_E5._J5)+_E5._K5;for(let c=0;
c<this._R5.length;++c)for(let i=0;i<_E5._F5;++i)this._R5[c][i]._z5(size);this._P5=_u5;}_B5(_C5){if(_C5===this._Q5)return;const damp=_C5*_E5._I5;for(let c=0;c<this._R5.length;++c)for(let i=0;i<_E5._F5;++i)this._R5[c][i]._B5(damp);this._Q5=_C5;}}registerProcessor("reverb1-processor",_E5);class _Y5 extends AudioWorkletProcessor{static get parameterDescriptors(){return [{name:"bypass",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:1},{name:"rate",automationRate:"a-rate",defaultValue:5.0,minValue:0.0,
maxValue:20.0},{name:"intensity",automationRate:"a-rate",defaultValue:1.0,minValue:0.0,maxValue:1.0},{name:"offset",automationRate:"a-rate",defaultValue:0.0,minValue:0.0,maxValue:1.0},{name:"shape",automationRate:"a-rate",defaultValue:0,minValue:0,maxValue:4}];}constructor(_J3){super();this._t3();const _K3=_J3.outputChannelCount[0];this._Z5=new Array(_K3).fill(1.0);this.__5=new Array(_K3).fill(0.0);this._06=new Array(_K3).fill(_16._26._36);this._46=new Array(_K3);for(let c=0;c<_K3;++c){this._46[c]=new _56();
this._46[c]._66(sampleRate);this._46[c]._76(this._Z5[c]);this._46[c]._86(this._06[c]);if(c%2===1){this._46[c]._96(this.__5[c]);}}}process(_x3,_y3,parameters){const input=_x3[0];const output=_y3[0];const bypass=parameters.bypass;const rate=parameters.rate;const intensity=parameters.intensity;const offset=parameters.offset;const shape=parameters.shape;for(let c=0;c<input.length;++c){const _z3=input[c];const _F3=output[c];for(let _A3=0;_A3<_z3.length;++_A3){_F3[_A3]=_z3[_A3];const _P3=(rate[_A3]!==undefined)?rate[_A3]:rate[0];
const _a6=(offset[_A3]!==undefined)?offset[_A3]:offset[0];const _b6=(shape[_A3]!==undefined)?shape[_A3]:shape[0];this._c6(c,_P3,_a6,_b6);const _d6=this._46[c]._u4();const _B3=(bypass[_A3]!==undefined)?bypass[_A3]:bypass[0];if(_B3>0.0){continue;}const i=(intensity[_A3]!==undefined)?intensity[_A3]:intensity[0];const out=_z3[_A3]*_d6*i;_F3[_A3]*=(1.0-i);_F3[_A3]+=out;}}return this._u3;}_c6(_w4,_e6,_f6,_g6){if(_e6!==this._Z5[_w4]){this._46[_w4]._76(_e6);this._Z5[_w4]=_e6;}if(_f6!==this.__5[_w4]){if(_w4%2===1){
this._46[_w4]._96(_f6);}this.__5[_w4]=_f6;}if(_g6!==this._06[_w4]){this._46[_w4]._86(_g6);this._06[_w4]=_g6;}}}registerProcessor("tremolo-processor",_Y5);function _16(){}_16._26={_36:0,_h6:1,_i6:2,_j6:3,_k6:4,_l6:5};_16._m6=function(_n6){return 1.0-_n6;};_16._o6=function(_n6){return _n6;};_16._p6=function(_n6){return 0.5*(Math.sin((_n6*2.0*Math.PI)-(Math.PI/2.0))+1.0);};_16._q6=function(_n6){if(_n6<0.5){return 0.0;}return 1.0;};_16._r6=function(_n6){if(_n6<0.5){return 2.0*_n6;}return 2.0-(2.0*_n6);};_16._s6=[_16._m6,
_16._o6,_16._p6,_16._q6,_16._r6];_t6._u6=512;_t6._v6=1.0/_t6._u6;function _t6(_w6){this.data=new Float32Array(_t6._u6);for(let i=0;i<_t6._u6;++i){this.data[i]=_w6(i*_t6._v6);}}_t6.prototype._u4=function(_n6){_n6=Math.max(0.0,_n6);_n6=Math.min(_n6,1.0);const _x6=_n6*_t6._u6;const _y6=~~_x6;const _z6=_x6-_y6;let _y4=_y6;let _z4=_y4+1;if(_y4>=_t6._u6){_y4-=_t6._u6;}if(_z4>=_t6._u6){_z4-=_t6._u6;}const _A4=this.data[_y4];const _B4=this.data[_z4];return _A4+(_B4-_A4)*_z6;};_56._A6=[];_56._B6=false;_56._C6=0.0;_56._Q4=20.0;
function _56(){this._D6=48000;this.shape=_16._26._i6;this.freq=1.0;this._E6=0.0;this._v6=0.0;this._F6=0.0;if(_56._B6==true){return;}for(let i=0;i<_16._26._l6;++i){_56._A6[i]=new _t6(_16._s6[i]);}_56._B6=true;}_56._G6=function(){return(_56._B6==true);};_56.prototype._66=function(_H6){this._D6=_H6;this._I6();};_56.prototype._76=function(_65){_65=Math.max(_56._C6,_65);_65=Math.min(_65,_56._Q4);this.freq=_65;this._I6();};_56.prototype._96=function(_f6){_f6=Math.max(0.0,_f6);_f6=Math.min(_f6,1.0);const _J6=_f6-this._F6;
this._F6=_f6;this._E6+=_J6;while(this._E6>=1.0){this._E6-=1.0;}while(this._E6<0.0){this._E6+=1.0;}};_56.prototype._86=function(_g6){_g6=Math.max(0,_g6);_g6=Math.min(_g6,_16._26._l6-1);this.shape=_g6;};_56.prototype._u4=function(){const result=_56._A6[this.shape]._u4(this._E6);this._E6+=this._v6;while(this._E6>=1.0){this._E6-=1.0;}return result;};_56.prototype._I6=function(){this._v6=this.freq/this._D6;};